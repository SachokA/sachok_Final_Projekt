<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="10" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-08-14T13:06:57 EEST" name="Run all tests" finished-at="2023-08-14T13:08:37 EEST" duration-ms="100417">
    <groups>
    </groups>
    <test started-at="2023-08-14T13:06:57 EEST" name="Test 1" finished-at="2023-08-14T13:08:37 EEST" duration-ms="100417">
      <class name="PriceDropCheckTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:PriceDropCheckTest@7c9bdee9]" started-at="2023-08-14T13:07:21 EEST" name="setUp" finished-at="2023-08-14T13:07:33 EEST" duration-ms="12079" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="priceDropCheck()[pri:0, instance:PriceDropCheckTest@7c9bdee9]" started-at="2023-08-14T13:07:33 EEST" name="priceDropCheck" finished-at="2023-08-14T13:07:34 EEST" duration-ms="1524" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- priceDropCheck -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:PriceDropCheckTest@7c9bdee9]" started-at="2023-08-14T13:07:34 EEST" name="tearDown" finished-at="2023-08-14T13:07:38 EEST" duration-ms="3425" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=priceDropCheck status=SUCCESS method=PriceDropCheckTest.priceDropCheck()[pri:0, instance:PriceDropCheckTest@7c9bdee9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- PriceDropCheckTest -->
      <class name="SortingCheckTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:SortingCheckTest@6b0615ae]" started-at="2023-08-14T13:07:53 EEST" name="setUp" finished-at="2023-08-14T13:07:58 EEST" duration-ms="4915" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="sortingCheck()[pri:0, instance:SortingCheckTest@6b0615ae]" started-at="2023-08-14T13:07:58 EEST" name="sortingCheck" finished-at="2023-08-14T13:08:28 EEST" duration-ms="29826" status="FAIL">
          <exception class="org.assertj.core.api.SoftAssertionError">
            <message>
              <![CDATA[
The following assertion failed:
1) 
Expecting:
 <[AllProductsComponent{name='Hummingbird - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mug Today is a good day', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The adventure begins', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The best is yet to come', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Customizable mug', currentPrice='16.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed t-shirt', currentPrice='22.94', oldPrice='28.68'},
    AllProductsComponent{name='Hummingbird printed sweater', currentPrice='34.46', oldPrice='43.08'},
    AllProductsComponent{name='Today is a good day Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The adventure begins Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The best is yet to come'...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='Pack Mug + Framed poster', currentPrice='42.0', oldPrice='0.0'}]>
to be equal to:
 <[AllProductsComponent{name='Hummingbird - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mug Today is a good day', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The adventure begins', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The best is yet to come', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Customizable mug', currentPrice='16.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed t-shirt', currentPrice='22.94', oldPrice='28.68'},
    AllProductsComponent{name='Today is a good day Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The adventure begins Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The best is yet to come'...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='Pack Mug + Framed poster', currentPrice='42.0', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed sweater', currentPrice='34.46', oldPrice='43.08'}]>
but was not.
at SortingCheckTest.sortingCheck(SortingCheckTest.java:29)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.assertj.core.api.SoftAssertionError: 
The following assertion failed:
1) 
Expecting:
 <[AllProductsComponent{name='Hummingbird - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mug Today is a good day', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The adventure begins', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The best is yet to come', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Customizable mug', currentPrice='16.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed t-shirt', currentPrice='22.94', oldPrice='28.68'},
    AllProductsComponent{name='Hummingbird printed sweater', currentPrice='34.46', oldPrice='43.08'},
    AllProductsComponent{name='Today is a good day Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The adventure begins Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The best is yet to come'...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='Pack Mug + Framed poster', currentPrice='42.0', oldPrice='0.0'}]>
to be equal to:
 <[AllProductsComponent{name='Hummingbird - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox - Vector graphics', currentPrice='10.8', oldPrice='0.0'},
    AllProductsComponent{name='Mug Today is a good day', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The adventure begins', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Mug The best is yet to come', currentPrice='14.28', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox notebook', currentPrice='15.48', oldPrice='0.0'},
    AllProductsComponent{name='Customizable mug', currentPrice='16.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Brown bear cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Mountain fox cushion', currentPrice='22.68', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed t-shirt', currentPrice='22.94', oldPrice='28.68'},
    AllProductsComponent{name='Today is a good day Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The adventure begins Framed...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='The best is yet to come'...', currentPrice='34.8', oldPrice='0.0'},
    AllProductsComponent{name='Pack Mug + Framed poster', currentPrice='42.0', oldPrice='0.0'},
    AllProductsComponent{name='Hummingbird printed sweater', currentPrice='34.46', oldPrice='43.08'}]>
but was not.
at SortingCheckTest.sortingCheck(SortingCheckTest.java:29)

at org.assertj.core.error.AssertionErrorCreator.multipleSoftAssertionsError(AssertionErrorCreator.java:75)
at org.assertj.core.api.AbstractSoftAssertions.assertAll(AbstractSoftAssertions.java:38)
at org.assertj.core.api.AbstractSoftAssertions.assertAll(AbstractSoftAssertions.java:43)
at SortingCheckTest.sortingCheck(SortingCheckTest.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- org.assertj.core.api.SoftAssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sortingCheck -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:SortingCheckTest@6b0615ae]" started-at="2023-08-14T13:08:28 EEST" name="tearDown" finished-at="2023-08-14T13:08:29 EEST" duration-ms="460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sortingCheck status=FAILURE method=SortingCheckTest.sortingCheck()[pri:0, instance:SortingCheckTest@6b0615ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- SortingCheckTest -->
      <class name="CheckLanguagesTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:CheckLanguagesTest@338cc75f]" started-at="2023-08-14T13:07:14 EEST" name="setUp" finished-at="2023-08-14T13:07:19 EEST" duration-ms="5087" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="checkLanguages()[pri:0, instance:CheckLanguagesTest@338cc75f]" started-at="2023-08-14T13:07:19 EEST" name="checkLanguages" finished-at="2023-08-14T13:07:20 EEST" duration-ms="1433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkLanguages -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:CheckLanguagesTest@338cc75f]" started-at="2023-08-14T13:07:20 EEST" name="tearDown" finished-at="2023-08-14T13:07:21 EEST" duration-ms="191" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkLanguages status=SUCCESS method=CheckLanguagesTest.checkLanguages()[pri:0, instance:CheckLanguagesTest@338cc75f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- CheckLanguagesTest -->
      <class name="AddingToCartTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:AddingToCartTest@431f1eaf]" started-at="2023-08-14T13:06:57 EEST" name="setUp" finished-at="2023-08-14T13:07:11 EEST" duration-ms="14290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="addingToCart()[pri:0, instance:AddingToCartTest@431f1eaf]" started-at="2023-08-14T13:07:11 EEST" name="addingToCart" finished-at="2023-08-14T13:07:19 EEST" duration-ms="7189" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addingToCart -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:AddingToCartTest@431f1eaf]" started-at="2023-08-14T13:07:19 EEST" name="tearDown" finished-at="2023-08-14T13:07:19 EEST" duration-ms="398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addingToCart status=SUCCESS method=AddingToCartTest.addingToCart()[pri:0, instance:AddingToCartTest@431f1eaf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- AddingToCartTest -->
      <class name="SubscribeWithInvalidEmailTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:SubscribeWithInvalidEmailTest@4e73b552]" started-at="2023-08-14T13:08:25 EEST" name="setUp" finished-at="2023-08-14T13:08:37 EEST" duration-ms="11122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="checkSubscribeWithInvalidEmail()[pri:0, instance:SubscribeWithInvalidEmailTest@4e73b552]" started-at="2023-08-14T13:08:37 EEST" name="checkSubscribeWithInvalidEmail" finished-at="2023-08-14T13:08:37 EEST" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkSubscribeWithInvalidEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:SubscribeWithInvalidEmailTest@4e73b552]" started-at="2023-08-14T13:08:37 EEST" name="tearDown" finished-at="2023-08-14T13:08:37 EEST" duration-ms="761" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkSubscribeWithInvalidEmail status=SUCCESS method=SubscribeWithInvalidEmailTest.checkSubscribeWithInvalidEmail()[pri:0, instance:SubscribeWithInvalidEmailTest@4e73b552] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- SubscribeWithInvalidEmailTest -->
      <class name="RegistrationWithValidDataTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:RegistrationWithValidDataTest@2f98635e]" started-at="2023-08-14T13:07:38 EEST" name="setUp" finished-at="2023-08-14T13:07:50 EEST" duration-ms="12432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registrationWithValidData()[pri:0, instance:RegistrationWithValidDataTest@2f98635e]" started-at="2023-08-14T13:07:50 EEST" name="registrationWithValidData" finished-at="2023-08-14T13:07:53 EEST" duration-ms="3219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registrationWithValidData -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:RegistrationWithValidDataTest@2f98635e]" started-at="2023-08-14T13:07:53 EEST" name="tearDown" finished-at="2023-08-14T13:07:53 EEST" duration-ms="151" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=registrationWithValidData status=SUCCESS method=RegistrationWithValidDataTest.registrationWithValidData()[pri:0, instance:RegistrationWithValidDataTest@2f98635e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- RegistrationWithValidDataTest -->
      <class name="CheckPopularProductsTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:CheckPopularProductsTest@4f453e63]" started-at="2023-08-14T13:07:19 EEST" name="setUp" finished-at="2023-08-14T13:07:31 EEST" duration-ms="12097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="checkPopularProducts()[pri:0, instance:CheckPopularProductsTest@4f453e63]" started-at="2023-08-14T13:07:31 EEST" name="checkPopularProducts" finished-at="2023-08-14T13:07:32 EEST" duration-ms="895" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkPopularProducts -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:CheckPopularProductsTest@4f453e63]" started-at="2023-08-14T13:07:32 EEST" name="tearDown" finished-at="2023-08-14T13:07:34 EEST" duration-ms="1710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkPopularProducts status=SUCCESS method=CheckPopularProductsTest.checkPopularProducts()[pri:0, instance:CheckPopularProductsTest@4f453e63] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- CheckPopularProductsTest -->
      <class name="CheckCategoriesTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:CheckCategoriesTest@6b00ad9]" started-at="2023-08-14T13:06:57 EEST" name="setUp" finished-at="2023-08-14T13:07:11 EEST" duration-ms="14224" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="checkCategories()[pri:0, instance:CheckCategoriesTest@6b00ad9]" started-at="2023-08-14T13:07:11 EEST" name="checkCategories" finished-at="2023-08-14T13:07:14 EEST" duration-ms="2159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkCategories -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:CheckCategoriesTest@6b00ad9]" started-at="2023-08-14T13:07:14 EEST" name="tearDown" finished-at="2023-08-14T13:07:14 EEST" duration-ms="216" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkCategories status=SUCCESS method=CheckCategoriesTest.checkCategories()[pri:0, instance:CheckCategoriesTest@6b00ad9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- CheckCategoriesTest -->
      <class name="CheckoutEndToEndTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:CheckoutEndToEndTest@49c8f6e8]" started-at="2023-08-14T13:07:42 EEST" name="setUp" finished-at="2023-08-14T13:07:53 EEST" duration-ms="11039" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="checkoutEndToEnd()[pri:0, instance:CheckoutEndToEndTest@49c8f6e8]" started-at="2023-08-14T13:07:53 EEST" name="checkoutEndToEnd" finished-at="2023-08-14T13:08:25 EEST" duration-ms="32250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkoutEndToEnd -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:CheckoutEndToEndTest@49c8f6e8]" started-at="2023-08-14T13:08:25 EEST" name="tearDown" finished-at="2023-08-14T13:08:25 EEST" duration-ms="183" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkoutEndToEnd status=SUCCESS method=CheckoutEndToEndTest.checkoutEndToEnd()[pri:0, instance:CheckoutEndToEndTest@49c8f6e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- CheckoutEndToEndTest -->
      <class name="RegistrationWithInvalidDataTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:RegistrationWithInvalidDataTest@7afbf561]" started-at="2023-08-14T13:07:34 EEST" name="setUp" finished-at="2023-08-14T13:07:39 EEST" duration-ms="5327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registrationWithValidData()[pri:0, instance:RegistrationWithInvalidDataTest@7afbf561]" started-at="2023-08-14T13:07:39 EEST" name="registrationWithValidData" finished-at="2023-08-14T13:07:42 EEST" duration-ms="2735" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registrationWithValidData -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:RegistrationWithInvalidDataTest@7afbf561]" started-at="2023-08-14T13:07:42 EEST" name="tearDown" finished-at="2023-08-14T13:07:42 EEST" duration-ms="164" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=registrationWithValidData status=SUCCESS method=RegistrationWithInvalidDataTest.registrationWithValidData()[pri:0, instance:RegistrationWithInvalidDataTest@7afbf561] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- RegistrationWithInvalidDataTest -->
    </test> <!-- Test 1 -->
  </suite> <!-- Run all tests -->
</testng-results>
